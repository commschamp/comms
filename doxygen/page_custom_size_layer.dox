/// @page page_custom_size_layer Defining Custom Message Size Protocol Stack Layer
/// @tableofcontents
/// The @b COMMS library provides default @ref comms::frame::MsgSizeLayer protocol 
/// stack layer to handle remaining length information in the protocol framing. 
/// However, it may be insufficient (or incorrect) for some particular use cases, such as
/// using @b bitfield field to store both remaining size (length) and some extra flags. 
/// The @ref page_frame_tutorial_new_layers section of the 
/// @ref page_frame_tutorial page explains how to define new (custom)
/// protocol layer. 
///
/// However, since @b v1.2 COMMS library provides an ability to extend the existing
/// definition of @ref comms::frame::MsgSizeLayer and customize some bits
/// and pieces. Let's implement the mentioned example of sharing the same byte
/// for message length and some flags.
///
/// For this example the protocol framing is defined to be
/// @code
/// ID | SIZE | PAYLOAD
/// @endcode
/// @b Note, that @b ID layer, which is responsible to create proper message
/// object, precedes the @b SIZE one.
///
/// First of all let's define the @ref page_define_prot_interface, which
/// holds the @b flags information as data member of every message object.
/// @code
/// namespace my_prot
/// {
///
/// // Enum used for numeric message IDs
/// enum MsgId
/// {
///     MsgId_Message1,
///     MsgId_Message2,
///     ...
/// };
///
/// // Base class for all the fields defining serialization endian
/// using FieldBase = comms::field::Field<comms::option::def::BigEndian>;
///
/// // Definition of the message flags
/// class MessageFlags : public
///     comms::field::BitmaskValue<
///         FieldBase,
///         comms::option::def::BitmaskReservedBits<0xf0>
///     >
/// {
/// public:
///     // Provides names and generates access functions for internal bits.
///     COMMS_BITMASK_BITS_SEQ(bit0, bit1, bit2, bit3);
/// };
///
/// // Definition of the extensible common message interface
/// template <typename... TOptions>
/// class Message : public
///     comms::Message<
///         TOptions...,
///         comms::option::def::BigEndian,
///         comms::option::def::MsgIdType<MsgId>,
///         comms::option::def::ExtraTransportFields<std::tuple<MessageFlags> >
///     >
/// {
///     // (Re)definition of the base class as inner Base type.
///     using Base = comms::Message<...>;
/// public:
///     //  Allow access to extra transport fields.
///     COMMS_MSG_TRANSPORT_FIELDS_NAMES(flags);
/// };
///
/// } // namespace my_prot
/// @endcode
/// Just to refresh the reader's memory: the usage of #COMMS_MSG_TRANSPORT_FIELDS_NAMES()
/// macro for the interface definition will generate @b transportField_flags() 
/// convenience member function to access the stored @b flags field, while 
/// usage of #COMMS_BITMASK_BITS_SEQ() in the flags field definition will
/// genereate @b getBitValue_X() and @b setBitValue_X() convenience member
/// functions to get / set values of the bits (where X is one of the defined
/// names: @b bit0, @b bit1, @b bit2, and @b bit3).
///
/// Now, let's define the @b bitfield field, that splits two bytes to
/// store remaining length (in lower 12 bits) as well as extra flags (in upper 4 bits)
/// @code
/// namespace my_prot
/// {
///
/// class SizeAndFlagsField : public
///     comms::field::Bitfield<
///         FieldBase,
///         std::tuple<
///             comms::field::IntValue<FieldBase, std::uint16_t, comms::option::def::FixedBitLength<12> >,
///             comms::field::IntValue<FieldBase, std::uint8_t, comms::option::def::FixedBitLength<4> >
///         >
///     >
/// {
///     // (Re)definition of the base class as inner Base type.
///     using Base = comms::field::Bitfield<...>;
/// public:
///     // Allow access to internal member fields.
///     COMMS_FIELD_MEMBERS_NAMES(size, flags);
/// };
/// 
/// } // my_prot
/// @endcode
/// Again, just to refresh the reader's memory: the usage of @ref COMMS_FIELD_MEMBERS_NAMES()
/// macro for the bitfield definition will generate @b field_X() 
/// convenience access member functions for the listed names.
///
/// Now it's time to actually extend the provided definition of 
/// the @ref comms::frame::MsgSizeLayer and support usage of the defined
/// earlier @b SizeAndFlagsField field.
/// @code
/// namespace my_prot
/// {
/// 
/// template <typename TNextLayer>
/// class MsgSizeAndFlagsLayer : public
///     comms::frame::MsgSizeLayer<
///         SizeAndFlagsField,   // Used field that contains remaining length
///         TNextLayer,          // Next layer in the protocol stack
///         comms::option::def::ExtendingClass<MsgSizeAndFlagsLayer<TNextLayer> >
///                              // Make the comms::frame::MsgSizeLayer aware of it being extended
///     >
/// {
///     // Repeat definition of the base class
///     using Base = comms::frame::MsgSizeLayer<...>;
///
/// public:
///     // Repeat types defined in the base class (not visible by default)
///     using Field = typename Base::Field; // same as SizeAndFlagsField
///     
///     // Retrieve remaining length value from the given SizeAndFlagsField field
///     static std::size_t getRemainingSizeFromField(const Field& field)
///     {
///         return static_cast<std::size_t>(field.field_size().value());
///     }
/// 
///     // Set flags value for the message object before proceeding to the next layer read
///     // The message object is passed by pointer (which may be nullptr for some cases)
///     template <typename TMsg>
///     static void beforeRead(const Field& field, TMsg* msg)
///     {
///         assert(msg != nullptr); // mustn't be nullptr for this example
///         msg->transportField_flags().value() = field.field_flags().value();
///     }
/// 
///     // Assemble the field's value before its write, given remaining length as well
///     // as message object itself.
///     template <typename TMsg>
///     static void prepareFieldForWrite(std::size_t size, const TMsg* msg, Field& field)
///     {
///         auto& sizeMemberField = field.field_size();
///         using SizeMemberFieldType = typename std::decay<decltype(sizeMemberField)>::type;
///         sizeMemberField.value() = static_cast<typename SizeMemberFieldType::ValueType>(size);
///
///         if (msg != nullptr) {
///             field.field_flags().value() = msg->transportField_flags().value();
///         }
///     }
/// };
///
/// } // namespace my_prot
/// @endcode
/// The @ref comms::frame::MsgSizeLayer doesn't have any virtual functions and
/// as the result not able to provide any polymorphic behavior. In order to be
/// able to extend its default functionality there is a need to use 
/// <a href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern">Curiously Recurring Template Pattern</a>.
/// It is done by passing @ref comms::option::def::ExtendingClass extension option with
/// the type of the layer class being defined to the @ref comms::frame::MsgSizeLayer.
///
/// The extending class can customize the default behavior by overriding 
/// the listed below functions. They do not
/// necessarily need to be @b static, accessing inner private state of the layer object
/// is also acceptable.
/// @li @ref comms::frame::MsgSizeLayer::doReadField() "doReadField()" - Member
/// function that is invoked to read field's value.
/// @li @ref comms::frame::MsgSizeLayer::doWriteField() "doWriteField()" - Member
/// function that is invoked to write field's value.
/// @li @ref comms::frame::MsgSizeLayer::doFieldLength() "doFieldLength()" - Member
/// function that is invoked to calculate serialization length of the field.
/// @li @ref comms::frame::MsgSizeLayer::getRemainingSizeFromField() "getRemainingSizeFromField()" - 
/// Member function that is invoked to retrieve the
/// remaining length out of the provided field object.
/// @li @ref comms::frame::MsgSizeLayer::beforeRead() "beforeRead()" -
/// Member function that is invoked before the read operation
/// is forwarded to the next layer. It gives the developer a chance to
/// update some extra transport fields accessible via message interface class (if 
/// such exists). Note that the message object is passed by the pointer to allow
/// cases when it is not created yet. In the example above @b ID layer precedes
/// the @b SIZE, so the message object must already be created.
/// @li @ref comms::frame::MsgSizeLayer::prepareFieldForWrite() "prepareFieldForWrite()" - 
/// Member function that is invoked to prepare
/// the field value before its write (serialization). After the function returns,
/// the @ref comms::frame::MsgSizeLayer will invoke @b write member function
/// of the passed field in order to serialize it. Note, that the message object is
/// passed by the pointer. There may be cases when @b doUpdate() member
/// function is going to be called without having actual message object being
/// present. In this case the @b msg parameter will be @b nullptr.
///
/// The newly defined custom protocol stack layer can be used instead of
/// @ref comms::frame::MsgSizeLayer when defining 
/// @ref page_frame_tutorial "protocol stack" (framing) of the protocol.
/// For example:
/// @code
/// namespace my_prot
/// {
/// 
/// template <typename TMessage, typename TAllMessages>
/// struct Frame1 : public 
///     comms::frame::MsgIdLayer<                     // ID
///         comms::feild::EnumValue<FieldBase, MsgId>,
///         TMessage,
///         TAllMessages,
///         MsgSizeAndFlagsLayer<                          // SIZE + FLAGS
///             comms::frame::MsgDataLayer<>          // PAYLOAD
///         >
///     >
/// {
///     // Generate convenience access functions for various layers
///     COMMS_PROTOCOL_LAYERS_ACCESS_OUTER(id, size, payload);
/// };
///
/// } // namespace my_prot
/// @endcode
///
/// For completeness of the picture, let's also do similar example when
/// @b SIZE precedes the @b ID.
/// @code
/// SIZE | ID | PAYLOAD
/// @endcode
/// The main problem with such scenario is that message object is created by
/// the @b ID layer (@ref comms::frame::MsgIdLayer), and is not available
/// in @b beforeRead() member function the @ref comms::frame::MsgSizeLayer
/// invokes. @b However, the flags may influence the way the message payload
/// is being processed, so the flags expected to be already assigned
/// to message object before message body is being read (before read operation
/// reaches @ref comms::frame::MsgDataLayer).
///
/// In order to resolve such case there is a need to do a bit of cheating by
/// introducing @b pseudo layer to manage @ref page_frame_tutorial_transport_value
/// after the @b ID layer and before the @b PAYLOAD.
/// @code
/// SIZE | ID | FLAGS (pseudo) | PAYLOAD
/// @endcode
/// The @b SIZE layer will access and assign the flags value to 
/// <b>FLAGS (pseudo)</b> layer, which will reassign it to the message object created later
/// by the @b ID one. @b NOTE, that @b pseudo @ref page_frame_tutorial_transport_value "transport value"
/// layer does @b NOT serialize its field and as the result preserves binary
/// compatibility of the protocol framing.
/// 
/// The extension to @ref comms::frame::MsgSizeLayer may be implemented like this:
/// @code
/// namespace my_prot
/// {
/// 
/// template <typename TNextLayer>
/// class MsgSizeAndFlagsLayer : public
///     comms::frame::MsgSizeLayer<
///         SizeAndFlagsField,   // Used field that contains remaining length
///         TNextLayer,          // Next layer in the protocol stack
///         comms::option::def::ExtendingClass<MsgSizeAndFlagsLayer<TNextLayer> >
///                              // Make the comms::frame::MsgSizeLayer aware of it being extended
///     >
/// {
///     // Repeat definition of the base class
///     using Base = comms::frame::MsgSizeLayer<...>;
///
/// public:
///     // Repeat types defined in the base class (not visible by default)
///     using Field = typename Base::Field; // same as SizeAndFlagsField
///     
///     // Retrieve remaining length value from the given SizeAndFlagsField field
///     static std::size_t getRemainingSizeFromField(const Field& field)
///     {
///         return static_cast<std::size_t>(field.field_size().value());
///     }
/// 
///     // Set flags value for the message object before proceeding to the next layer read
///     template <typename TMsg>
///     void beforeRead(const Field& field, TMsg* msg)
///     {
///         assert(msg == nullptr); // message is not created yet
///         auto& pseudoFlagsLayer = Base::nextLayer().nextLayer(); 
///         pseudoFlagsLayer.pseudoField().value() = field.field_flags().value();
///     }
/// 
///     // Assemble the field's value before its write, given remaining length as well
///     // as message object itself.
///     template <typename TMsg>
///     static void prepareFieldForWrite(std::size_t size, const TMsg* msg, Field& field)
///     {
///         auto& sizeMemberField = field.field_size();
///         using SizeMemberFieldType = typename std::decay<decltype(sizeMemberField)>::type;
///         sizeMemberField.value() = static_cast<typename SizeMemberFieldType::ValueType>(size);
///
///         if (msg != nullptr) {
///             field.field_flags().value() = msg->transportField_flags().value();
///         }
///     }
/// };
///
/// } // namespace my_prot
/// @endcode
/// The protocol stack (transport framing) itself needs to be defined like this:
/// @code
/// namespace my_prot
/// {
/// 
/// template <typename TMessage, typename TAllMessages>
/// struct Frame2 : public 
///     MsgSizeAndFlagsLayer<                                        // SIZE + FLAGS 
///         comms::frame::MsgIdLayer<                             // ID
///             comms::feild::EnumValue<FieldBase, MsgId>
///             TMessage,
///             TAllMessages,
///             comms::frame::TransportValueLayer<                // FLAGS
///                 comms::field::IntValue<FieldBase, std::uint8_t>, 
///                 0U,                                              
///                 comms::frame::MsgDataLayer<>,                 // PAYLOAD      
///                 comms::option::def::PseudoValue                  // Make flags "pseudo" 
///             >
///         >
///     >
/// {
///     // Generate convenience access functions for various layers
///     COMMS_PROTOCOL_LAYERS_ACCESS_OUTER(size, id, flags, payload);
/// };
///
/// } // namespace my_prot
/// @endcode
///

