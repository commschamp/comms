//
// Copyright 2021 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class CustomSyncPrefixLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > LeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    typedef TestMessageBase<BeTraits> BeMsgBase;
    typedef TestMessageBase<LeTraits> LeMsgBase;
    typedef TestMessageBase<BeBackInsertTraits> BeBackInsertMsgBase;
    typedef comms::Message<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef BeMsgBase::Field BeField;
    typedef LeMsgBase::Field LeField;
    typedef BeBackInsertMsgBase::Field BeBackInsertField;

    typedef Message1<BeMsgBase> BeMsg1;
    typedef Message1<LeMsgBase> LeMsg1;
    typedef Message1<BeBackInsertMsgBase> BeBackInsertMsg1;
    typedef Message2<BeMsgBase> BeMsg2;
    typedef Message2<LeMsgBase> LeMsg2;
    typedef Message3<BeMsgBase> BeMsg3;
    typedef Message3<LeMsgBase> LeMsg3;
    typedef Message3<BeBackInsertMsgBase> BeBackInsertMsg3;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;

    template <typename TField, std::size_t TSize>
    using SyncField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::DefaultNumValue<0xabcd>
        >;

    template <typename TField>
    using SyncField2 = SyncField<TField, 2>;
    using BeSyncField2 = SyncField2<BeField>;
    using LeSyncField2 = SyncField2<LeField>;
    using BeBackInsertSyncField2 = SyncField2<BeBackInsertField>;

    template <typename TField, std::size_t TSize, std::size_t TOffset = 0>
    using SizeField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::NumValueSerOffset<static_cast<std::intmax_t>(TOffset)>
        >;

    template <typename TField>
    using SizeField20 = SizeField<TField, 2, 0>;
    using BeSizeField20 = SizeField20<BeField>;
    using LeSizeField20 = SizeField20<LeField>;
    using BeBackInsertSizeField20 = SizeField20<BeBackInsertField>;

    template <typename TField>
    using SizeField30 = SizeField<TField, 3, 0>;
    using BeSizeField30 = SizeField30<BeField>;
    using LeSizeField30 = SizeField30<LeField>;

    template <typename TField>
    using SizeField22 = SizeField<TField, 2, 2>;
    using BeSizeField22 = SizeField22<BeField>;
    using LeSizeField22 = SizeField22<LeField>;

    template <typename TField, std::size_t TLen>
    using IdField =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<TLen>
        >;

    template <typename TField>
    using IdField1 = IdField<TField, 1>;
    using BeIdField1 = IdField1<BeField>;
    using LeIdField1 = IdField1<LeField>;
    using BeBackInsertIdField1 = IdField1<BeBackInsertField>;

    template <typename TField>
    using IdField2 = IdField<TField, 2>;
    using BeIdField2 = IdField2<BeField>;
    using LeIdField2 = IdField2<LeField>;

    template <typename TField, typename TNextLayer>
    class CustomSyncPrefixLayer : public
        comms::frame::SyncPrefixLayer<
            TField,
            TNextLayer,
            comms::option::ExtendingClass<CustomSyncPrefixLayer<TField, TNextLayer> >
        >
    {
        using Base = 
            comms::frame::SyncPrefixLayer<
                TField,
                TNextLayer,
                comms::option::ExtendingClass<CustomSyncPrefixLayer<TField, TNextLayer> >
            >;

    public:
        using Field = typename Base::Field;
        bool verifyFieldValue(const Field& field)
        {
            bool valid = (field.value() == getPrefix(m_inputCount));
            if (valid) {
                ++m_inputCount;
            }
            return valid;
        } 

        void prepareFieldForWrite(Field& field) const
        {
            field.value() = getPrefix(m_outputCount);
            ++m_outputCount;
        }

    private:
        static typename TField::ValueType getPrefix(unsigned count)
        {
            static const typename TField::ValueType Map[] = {
                0xabcd,
                0xdead
            };
            static const std::size_t MapSize = std::extent<decltype(Map)>::value;

            auto idx = (count % MapSize);
            return Map[idx];
        }

        unsigned m_inputCount = 0;
        mutable unsigned m_outputCount = 0;
    };


    template <typename TSyncField, typename TSizeField, typename TIdField, typename TMessage>
    using Frame =
        CustomSyncPrefixLayer<
            TSyncField,
            comms::frame::MsgSizeLayer<
                TSizeField,
                comms::frame::MsgIdLayer<
                    TIdField,
                    TMessage,
                    AllTestMessages<TMessage>,
                    comms::frame::MsgDataLayer<>
                >
            >
        >;
};

void CustomSyncPrefixLayerTestSuite::test1()
{
    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > TestFrame;

    TestFrame frame;

    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;    

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);

    static const char Buf2[] = {
        static_cast<char>(0xde), static_cast<char>(0xad), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t Buf2Size = std::extent<decltype(Buf2)>::value;      

    auto msgPtr2 = commonReadWriteMsgTest(frame, &Buf2[0], Buf2Size);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg2 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(msg1, msg2);    
}
