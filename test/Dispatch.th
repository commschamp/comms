//
// Copyright 2019 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "comms/dispatch.h"
#include "comms/process.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class DispatchTestSuite : public CxxTest::TestSuite
{
public:

    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

    class TypeHandler
    {
    public:
        template <typename TMsg>
        void handle()
        {
            static_assert(comms::isMessageBase<TMsg>(), "Wrong dispatch");
            ++m_detectedCnt;
            m_lastId = static_cast<decltype(m_lastId)>(TMsg::staticMsgId());
        }

        unsigned detectedCnt() const
        {
            return m_detectedCnt;
        }

        MessageType lastId() const
        {
            return m_lastId;
        }

        void reset()
        {
            m_detectedCnt = 0U;
            m_lastId = InvalidMessageId;
        }

    private:
        static const MessageType InvalidMessageId = static_cast<MessageType>(99);
        unsigned m_detectedCnt = 0U;
        MessageType m_lastId = InvalidMessageId;
    };

    class MsgHandler
    {
    public:
        template <typename TMsg>
        void handle(TMsg& msg)
        {
            static_cast<void>(msg);
            static_assert(comms::isMessageBase<TMsg>(), "Wrong dispatch");
            ++m_detectedCnt;
            m_lastId = static_cast<decltype(m_lastId)>(TMsg::staticMsgId());
        }

        unsigned detectedCnt() const
        {
            return m_detectedCnt;
        }

        MessageType lastId() const
        {
            return m_lastId;
        }

        void reset()
        {
            m_detectedCnt = 0U;
            m_lastId = InvalidMessageId;
        }

    private:
        static const MessageType InvalidMessageId = static_cast<MessageType>(99);
        unsigned m_detectedCnt = 0U;
        MessageType m_lastId = InvalidMessageId;
    };

    template <typename TInterface>
    class MsgHandlerT
    {
    public:
        template <typename TMsg>
        void handle(TMsg& msg)
        {
            static_cast<void>(msg);
            static_assert(comms::isMessageBase<TMsg>(), "Wrong dispatch");
            ++m_detectedCnt;
            m_lastId = static_cast<decltype(m_lastId)>(TMsg::staticMsgId());
        }

        void handle(TInterface&)
        {
            ++m_interfaceCnt;
        }

        unsigned detectedCnt() const
        {
            return m_detectedCnt;
        }

        unsigned interfaceCnt() const
        {
            return m_interfaceCnt;
        }        

        MessageType lastId() const
        {
            return m_lastId;
        }

        void reset()
        {
            m_detectedCnt = 0U;
            m_lastId = InvalidMessageId;
        }

    private:
        static const MessageType InvalidMessageId = static_cast<MessageType>(99);
        unsigned m_detectedCnt = 0U;
        unsigned m_interfaceCnt = 0U;
        MessageType m_lastId = InvalidMessageId;
    };    

    using Interface1 =
        comms::Message<
            comms::option::def::MsgIdType<MessageType>,
            comms::option::def::BigEndian
        >;


    using Interface2 =
        comms::Message<
            comms::option::def::MsgIdType<MessageType>,
            comms::option::def::BigEndian,
            comms::option::Handler<MsgHandler>
        >;
private:
};

void DispatchTestSuite::test1()
{
    do {
        using AllMessages = std::tuple<>;
        TypeHandler handler;
        TS_ASSERT(!comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType1, handler));
        TS_ASSERT(!comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType1, handler));
        TS_ASSERT(!comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.detectedCnt(), 0U);
        static_assert(!comms::dispatchMsgIsDirect<Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsDirect<Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");
    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Message1<Interface1>
            >;

        TypeHandler handler;
        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 3U);

        TS_ASSERT(!comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType2, handler));
        TS_ASSERT(!comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType2, handler));
        TS_ASSERT(!comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.detectedCnt(), 3U);

        static_assert(!comms::dispatchMsgIsDirect<Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsDirect<Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");

    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Message1<Interface1>,
                Message2<Interface1>
            >;

        TypeHandler handler;
        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 3U);

        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 6U);

        TS_ASSERT(!comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType3, handler));
        TS_ASSERT(!comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType3, handler));
        TS_ASSERT(!comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType3, handler));
        TS_ASSERT_EQUALS(handler.detectedCnt(), 6U);

        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");

    } while (false);

    do {
        using AllMessages =
            std::tuple<
                Message1<Interface1>,
                Message2<Interface1>,
                Message3<Interface1>
            >;

        TypeHandler handler;
        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType1, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType1);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 3U);

        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType2, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType2);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 6U);

        TS_ASSERT(comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType3, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType3);
        TS_ASSERT(comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType3, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType3);
        TS_ASSERT(comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType3, handler));
        TS_ASSERT_EQUALS(handler.lastId(), MessageType3);
        TS_ASSERT_EQUALS(handler.detectedCnt(), 9U);

        TS_ASSERT(!comms::dispatchMsgTypePolymorphic<AllMessages>(MessageType4, handler));
        TS_ASSERT(!comms::dispatchMsgTypeStaticBinSearch<AllMessages>(MessageType4, handler));
        TS_ASSERT(!comms::dispatchMsgTypeLinearSwitch<AllMessages>(MessageType4, handler));
        TS_ASSERT_EQUALS(handler.detectedCnt(), 9U);

        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface1, MsgHandler>(), "Invalid assumption");
        static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid assumption");

    } while (false);

}

void DispatchTestSuite::test2()
{
    using Msg1 = Message1<Interface2>;
    using Msg2 = Message2<Interface2>;
    using Msg3 = Message3<Interface2>;

    using AllMessages =
        std::tuple<
            Msg1,
            Msg2,
            Msg3
        >;

    static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid dispatch");
    static_assert(comms::dispatchMsgIsDirect<Interface2, MsgHandler>(), "Invalid dispatch");
    static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid dispatch");

    Msg1 msg1;
    auto& msg = static_cast<Interface2&>(msg1);
    MsgHandler handler;
    TS_ASSERT(comms::dispatchMsgIsPolymorphic<AllMessages>(msg, handler));
    TS_ASSERT(comms::dispatchMsgIsDirect(msg, handler));
    TS_ASSERT(!comms::dispatchMsgIsStaticBinSearch<AllMessages>(msg, handler));

}

void DispatchTestSuite::test3()
{
    using Msg1 = Message1<Interface2>;
    using Msg2 = Message2<Interface2>;
    using Msg90_1 = Message90_1<Interface2>;

    using AllMessages =
        std::tuple<
            Msg1,
            Msg2,
            Msg90_1
        >;

    static_assert(comms::dispatchMsgIsPolymorphic<AllMessages, Interface2, MsgHandler>(), "Invalid dispatch");
    static_assert(comms::dispatchMsgIsDirect<Interface2, MsgHandler>(), "Invalid dispatch");
    static_assert(!comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface2, MsgHandler>(), "Invalid dispatch");

    Msg1 msg1;
    auto& msg = static_cast<Interface2&>(msg1);
    MsgHandler handler;
    TS_ASSERT(comms::dispatchMsgIsPolymorphic<AllMessages>(msg, handler));
    TS_ASSERT(comms::dispatchMsgIsDirect(msg, handler));
    TS_ASSERT(!comms::dispatchMsgIsStaticBinSearch<AllMessages>(msg, handler));

}

void DispatchTestSuite::test4()
{
    using Msg1 = Message1<Interface1>;
    using Msg2 = Message2<Interface1>;
    using Msg90_1 = Message90_1<Interface1>;

    using AllMessages =
        std::tuple<
            Msg1,
            Msg2,
            Msg90_1
        >;

    static_assert(!comms::dispatchMsgIsPolymorphic<AllMessages, Interface1, MsgHandler>(), "Invalid dispatch");
    static_assert(!comms::dispatchMsgIsDirect<Interface1, MsgHandler>(), "Invalid dispatch");
    static_assert(comms::dispatchMsgIsStaticBinSearch<AllMessages, Interface1, MsgHandler>(), "Invalid dispatch");

    Msg1 msg1;
    auto& msg = static_cast<Interface1&>(msg1);
    MsgHandler handler;
    TS_ASSERT(!comms::dispatchMsgIsPolymorphic<AllMessages>(msg, handler));
    TS_ASSERT(!comms::dispatchMsgIsDirect(msg, handler));
    TS_ASSERT(comms::dispatchMsgIsStaticBinSearch<AllMessages>(msg, handler));

}

void DispatchTestSuite::test5()
{
    class TestHandler;
    using TestInterface =
        comms::Message<
            comms::option::def::MsgIdType<MessageType>,
            comms::option::def::BigEndian,
            comms::option::app::Handler<TestHandler>,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>
        >;    

    using Msg1 = Message1<TestInterface>;
    using Msg2 = Message2<TestInterface>;
    using Msg90_1 = Message90_1<TestInterface>;
    using Msg90_2 = Message90_2<TestInterface>;

    using AllMessages =
        std::tuple<
            Msg1,
            Msg2,
            Msg90_1,
            Msg90_2
        >;

    class TestHandler : public MsgHandlerT<TestInterface> {};

    using FieldBase = comms::Field<comms::option::def::BigEndian>;
    using SizeField = comms::field::IntValue<FieldBase, std::uint16_t>;
    using Idfield = comms::field::EnumValue<FieldBase, MessageType>;

    using Frame = 
        comms::frame::MsgSizeLayer<
            SizeField,
            comms::frame::MsgIdLayer<
                Idfield,
                TestInterface,
                AllMessages,
                comms::frame::MsgDataLayer<>
            >
        >;

    std::vector<std::uint8_t> outBuf;
    
    Msg90_2 outMsg;
    TestHandler handler;
    Frame frame;

    outBuf.resize(frame.length(outMsg));
    auto writeIter = &outBuf[0];
    
    auto es = frame.write(outMsg, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    comms::processAllWithDispatch(&outBuf[0], outBuf.size(), frame, handler);
    TS_ASSERT_EQUALS(handler.detectedCnt(), 1U);
    TS_ASSERT_EQUALS(handler.interfaceCnt(), 0U);
}
