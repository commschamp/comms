//
// Copyright 2017 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class TransportValueLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertOptions;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    using FieldBase = comms::Field<comms::option::BigEndian>;

    using VersionField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t,
            comms::option::DefaultNumValue<5>
        >;

    typedef std::tuple<
        VersionField
    > ExtraVersionTransport;

    template <typename TOptions = comms::option::EmptyOption>
    struct ExtraTransportMessageBase : public
        comms::Message<
            TOptions,
            comms::option::ExtraTransportFields<ExtraVersionTransport>
        >
    {
        using Base =
            comms::Message<
                TOptions,
                comms::option::ExtraTransportFields<ExtraVersionTransport>
            >;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(version);
    };

    typedef ExtraTransportMessageBase<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;

    using SizeField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t
        >;

    using SizeFieldIncChecksum =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t,
            comms::option::def::NumValueSerOffset<sizeof(std::uint16_t)>
        >;        

    using IdField =
        comms::field::EnumValue<
            FieldBase,
            MessageType,
            comms::option::FixedLength<2>
        >;

    using ChecksumField =
        comms::field::IntValue<
            FieldBase,
            std::uint16_t
        >;        

    template <typename TMessage>
    using BeforeIdFrame =
        comms::frame::MsgSizeLayer<
            SizeField,
            comms::frame::TransportValueLayer<
                VersionField,
                ExtraTransportMessageBase<>::TransportFieldIdx_version,
                comms::frame::MsgIdLayer<
                    IdField,
                    TMessage,
                    AllTestMessages<TMessage>,
                    comms::frame::MsgDataLayer<>
                >
            >
        >;

    template <typename TMessage>
    using NoVersionFrame =
        comms::frame::MsgSizeLayer<
            SizeField,
            comms::frame::MsgIdLayer<
                IdField,
                TMessage,
                AllTestMessages<TMessage>,
                comms::frame::MsgDataLayer<>
            >
        >;

    template <typename TMessage, typename... TOpt>
    using AfterIdFrame =
        comms::frame::MsgSizeLayer<
            SizeField,
            comms::frame::MsgIdLayer<
                IdField,
                TMessage,
                AllTestMessages<TMessage>,
                comms::frame::TransportValueLayer<
                    VersionField,
                    ExtraTransportMessageBase<>::TransportFieldIdx_version,
                    comms::frame::MsgDataLayer<>,
                    TOpt...
                >
            >
        >;

    template <typename TMessage, typename... TOpt>
    using AfterIdWithChecksumFrame =
        comms::frame::ChecksumLayer<
            ChecksumField,
            comms::frame::checksum::BasicSum<std::uint16_t>,
            comms::frame::MsgSizeLayer<
                SizeFieldIncChecksum,
                comms::frame::MsgIdLayer<
                    IdField,
                    TMessage,
                    AllTestMessages<TMessage>,
                    comms::frame::TransportValueLayer<
                        VersionField,
                        ExtraTransportMessageBase<>::TransportFieldIdx_version,
                        comms::frame::MsgDataLayer<>,
                        TOpt...
                    >
                >
            >
        >;        
};

void TransportValueLayerTestSuite::test1()
{
    static const char Buf[] = {
        0x0, 0x6, // size
        0x0, 0x4, // version
        0x0, MessageType1, // id
        0x01, 0x02 // data
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using TestFrame = BeforeIdFrame<MsgBase>;

    TestFrame frame;

    TS_ASSERT_EQUALS(frame.length(), 6U);

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 4U);

    auto& msg1 = dynamic_cast<Message1<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void TransportValueLayerTestSuite::test2()
{

    static const char ExpectedBuf[] = {
        0x0, 0x6, 0x0, 0x5, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;
    char buf[BufSize] = {0};

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using TestFrame = BeforeIdFrame<MsgBase>;

    Message1<MsgBase> msg;
    std::get<0>(msg.fields()).value() = 0x0102;

    TestFrame frame;
    commonWriteReadMsgTest(frame, msg, buf, BufSize, &ExpectedBuf[0]);
}

void TransportValueLayerTestSuite::test3()
{
    static const char Buf[] = {
        0x0, 0x6, 0x0, MessageType1, 0x0, 0x8, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using TestFrame = AfterIdFrame<MsgBase>;

    TestFrame frame;

    TS_ASSERT_EQUALS(frame.length(), 6U);

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 8U);

    auto& msg1 = dynamic_cast<Message1<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void TransportValueLayerTestSuite::test4()
{
    static const char Buf[] = {
        0x0, 0x6, 0x0, 0x4, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using TestFrame = BeforeIdFrame<BeNonPolymorphicMessageBase>;

    TestFrame frame;

    TS_ASSERT_EQUALS(frame.length(), 6U);

    NonPolymorphicBeMsg1 msg;
    commonReadWriteMsgDirectTest(frame, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 4U);

    TestFrame::AllFields fields;
    commonReadWriteMsgDirectTest(frame, fields, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(fields).value(), 0x6);
    TS_ASSERT_EQUALS(std::get<1>(fields).value(), 0x4);
    TS_ASSERT_EQUALS(std::get<2>(fields).value(), MessageType1);
    TS_ASSERT_EQUALS(std::get<3>(fields).value(), std::vector<std::uint8_t>(Buf + 6, Buf + 8));
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
    TS_ASSERT_EQUALS(msg.transportField_version().value(), 4U);

    NonPolymorphicBeMsg2 msg2;
    commonReadWriteMsgDirectTest(frame, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);

    TestFrame::AllFields fields2;
    commonReadWriteMsgDirectTest(frame, fields2, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT_EQUALS(std::get<0>(fields2).value(), 0x6);
    TS_ASSERT_EQUALS(std::get<1>(fields2).value(), 0x4);
    TS_ASSERT_EQUALS(std::get<2>(fields2).value(), MessageType1);

}

void TransportValueLayerTestSuite::test5()
{
    static const char Buf[] = {
        0x0, 0x4, 0x0, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using TestFrame = AfterIdFrame<MsgBase, comms::option::PseudoValue>;

    TestFrame frame;
    TS_ASSERT_EQUALS(frame.length(), 4U);

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 5U);

    frame.nextLayer().nextLayer().pseudoField().value() = 8U;
    auto msgPtr2 = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr2);
    TS_ASSERT_EQUALS(msgPtr2->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr2->transportField_version().value(), 8U);
}

void TransportValueLayerTestSuite::test6()
{
    static const char Buf[] = {
        0x0, 0x8, // size
        0x0, MessageType1, // Id
        0x0, 0x8, // version
        0x01, 0x02, // data
        0x00, 0x13, // checksum
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using MsgBase = ExtraTransportMessageBase<BeOptions>;
    using TestFrame = AfterIdWithChecksumFrame<MsgBase>;

    TestFrame frame;

    TS_ASSERT_EQUALS(frame.length(), 8U);

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_version().value(), 8U);

    auto& msg1 = dynamic_cast<Message1<MsgBase>&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}
