//
// Copyright 2014 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <iostream>
#include <algorithm>
#include <iterator>
#include <memory>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class MsgDataLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();

private:

    template <typename TMessage>
    TMessage internalReadWriteTest(
        const char* const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    template <typename TMessage>
    TMessage internalReadWriteToVectorTest(
        const char* const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    template <typename TMessage>
    TMessage internalReadWriteCachedTest(
        const char* const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    template <typename TMessage>
    void internalWriteReadTest(
        const TMessage& msg,
        char* const buf,
        std::size_t bufSize,
        const char* expectedBuf,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);

    template <typename TMessage>
    void internalDirectReadWriteTest(
        TMessage& msg,
        const char* const buf,
        std::size_t bufSize,
        comms::ErrorStatus expectedErrStatus = comms::ErrorStatus::Success);


    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BigEndianTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BackInserterBigEndianTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > LittleEndianTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BackInserterLittleEndianTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    typedef comms::Message<BigEndianTraits> BeMessageBase;
    typedef comms::Message<BackInserterBigEndianTraits> BackInsertBeMessageBase;
    typedef comms::Message<LittleEndianTraits> LeMessageBase;
    typedef comms::Message<BackInserterLittleEndianTraits> BackInsertLeMessageBase;
    typedef comms::Message<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef Message1<BeMessageBase> BeMsg1;
    typedef Message1<BackInsertBeMessageBase> BackInsertBeMsg1;
    typedef Message1<LeMessageBase> LeMsg1;
    typedef Message1<BackInsertLeMessageBase> BackInsertLeMsg1;

    typedef Message2<BeMessageBase> BeMsg2;
    typedef Message2<LeMessageBase> LeMsg2;

    typedef Message3<BeMessageBase> BeMsg3;
    typedef Message3<LeMessageBase> LeMsg3;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;

#ifndef CC_COMPILER_GCC47
    template <typename TMessage>
    class Frame : public comms::frame::MsgDataLayer<>
    {
        using Base = comms::frame::MsgDataLayer<>;
    public:
        COMMS_PROTOCOL_LAYERS_NAMES(payload);
    };
#else
    template <typename TMessage>
    using Frame = comms::frame::MsgDataLayer<>;
#endif
};

void MsgDataLayerTestSuite::test1()
{
    static const char Buf[] = {
        0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    auto msg = internalReadWriteTest<BeMsg1>(Buf, BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);
    auto msg2 = internalReadWriteToVectorTest<BackInsertBeMsg1>(Buf, BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg2.fields()).value(), 0x0102);
    auto msg3 = internalReadWriteCachedTest<BeMsg1>(Buf, BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg3.fields()).value(), 0x0102);
}

void MsgDataLayerTestSuite::test2()
{
    BeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    static const char ExpectedBuf[] = {
        0x02, 0x03
    };

    static const std::size_t BufSize =
        std::extent<decltype(ExpectedBuf)>::value;
    char buf[BufSize] = {0};

    internalWriteReadTest(msg, buf, BufSize, &ExpectedBuf[0]);
}

void MsgDataLayerTestSuite::test3()
{
    const char buf[] = {
        0
    };

    auto msg = internalReadWriteTest<BeMsg2>(buf, 0);
    static_cast<void>(msg);
}

void MsgDataLayerTestSuite::test4()
{
    LeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    char buf[1] = {0};
    const std::size_t bufSize = std::extent<decltype(buf)>::value;

    internalWriteReadTest(msg, buf, bufSize, nullptr, comms::ErrorStatus::BufferOverflow);
}

void MsgDataLayerTestSuite::test5()
{
    static const char Buf[] = {
        0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    NonPolymorphicBeMsg1 msg;
    internalDirectReadWriteTest(msg, Buf, BufSize);
    TS_ASSERT_EQUALS(msg.field_value1().value(), 0x0102);
}

 void MsgDataLayerTestSuite::test6()
 {
     static const char Buf[] = {
         0x01,
     };

     static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

     using ProtFrame = Frame<BeMessageBase>;
     ProtFrame frame;
 #ifndef CC_COMPILER_GCC47
     static_cast<void>(frame.layer_payload()); // check generation of access func
 #endif

     NonPolymorphicBeMsg1 msg1;
     auto readIter = &Buf[0];
     std::size_t missingSize = 0U;
     std::size_t missingSize2 = 0U;
     unsigned id = 0U;
     auto es =
        frame.read(
            msg1,
            readIter,
            BufSize,
            comms::frame::missingSize(missingSize),
            comms::frame::msgId(id),
            comms::frame::missingSize(missingSize2));
     TS_ASSERT_EQUALS(es, comms::ErrorStatus::NotEnoughData);
     TS_ASSERT_EQUALS(missingSize, 1U);
     TS_ASSERT_EQUALS(missingSize, missingSize2);
}

template <typename TMessage>
TMessage MsgDataLayerTestSuite::internalReadWriteTest(
    const char* const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    typedef TMessage Message;

    using ProtFrame =
        typename comms::util::Conditional<
            std::is_base_of<BeMessageBase, Message>::value
        >::template Type<
            Frame<BeMessageBase>,
            Frame<LeMessageBase>
        >;

    ProtFrame frame;
#ifndef CC_COMPILER_GCC47
    static_cast<void>(frame.layer_payload()); // check generation of access func
#endif

    auto readIter = buf;
    std::unique_ptr<Message> msg(new Message);
    auto es = frame.read(msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        std::vector<char> outDataBuf(diff);
        if (outDataBuf.empty()) {
            outDataBuf.resize(1U); // Make sure the pointer to the first element is valid
        }

        auto writeIter = &outDataBuf[0];
        auto writeES = frame.write(*msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }

    return *msg;
}

template <typename TMessage>
TMessage MsgDataLayerTestSuite::internalReadWriteCachedTest(
    const char* const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    using Interface = typename std::decay<decltype(comms::toMessage(std::declval<TMessage>()))>::type;
    using ProtFrame = Frame<Interface>;

    ProtFrame frame;
    static_cast<void>(frame);
    typename ProtFrame::AllFields allFields;
    auto readIter = buf;
    std::unique_ptr<TMessage> msg(new TMessage);
    auto es = frame.readFromDataFeildsCached(allFields, msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);
    auto& dataField = std::get<0>(allFields);
    auto& dataFieldVec = dataField.value();


    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        TS_ASSERT_EQUALS(dataFieldVec.size(), diff);
        TS_ASSERT(std::equal(buf, buf + diff, dataFieldVec.begin()));

        std::vector<char> outDataBuf(diff);
        if (outDataBuf.empty()) {
            outDataBuf.resize(1U); // Make sure the pointer to the first element is valid
        }
        auto writeIter = &outDataBuf[0];        

        typename ProtFrame::AllFields allOutFields;
        auto writeES = frame.writeFieldsCached(allOutFields, *msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));

        auto& outDataField = std::get<0>(allOutFields);
        TS_ASSERT_EQUALS(dataField, outDataField);
    }

    return *msg;
}

template <typename TMessage>
TMessage MsgDataLayerTestSuite::internalReadWriteToVectorTest(
    const char* const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    typedef TMessage Message;

    using ProtFrame =
        typename comms::util::Conditional<
            std::is_base_of<BackInsertBeMessageBase, Message>::value
        >::template Type<
            Frame<BackInsertBeMessageBase>,
            Frame<BackInsertLeMessageBase>
        >;

    ProtFrame frame;
    static_cast<void>(frame);
    auto readIter = buf;
    std::unique_ptr<Message> msg(new Message);
    auto es = frame.read(msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        std::vector<char> outDataBuf;
        auto writeIter = std::back_inserter(outDataBuf);
        auto writeES = frame.write(*msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(diff, outDataBuf.size());
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }

    return *msg;
}


template <typename TMessage>
void MsgDataLayerTestSuite::internalWriteReadTest(
    const TMessage& msg,
    char* const buf,
    std::size_t bufSize,
    const char* expectedBuf,
    comms::ErrorStatus expectedErrStatus)
{
    typedef TMessage Message;

    using ProtFrame = 
        typename comms::util::Conditional<
            std::is_base_of<BeMessageBase, Message>::value
        >::template Type<
            Frame<BeMessageBase>,
            Frame<LeMessageBase>
        >;

    ProtFrame frame;
    static_cast<void>(frame);
    auto writeIter = buf;
    auto es = frame.write(msg, writeIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, writeIter));
        TS_ASSERT(expectedBuf != 0);
        TS_ASSERT(std::equal(expectedBuf, expectedBuf + diff, buf));

        std::unique_ptr<Message> readMsgPtr(new Message);
        auto readIter = static_cast<const char*>(buf);
        auto readES = frame.read(readMsgPtr, readIter, diff);
        TS_ASSERT_EQUALS(readES, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(msg, *readMsgPtr);
    }
}

template <typename TMessage>
void MsgDataLayerTestSuite::internalDirectReadWriteTest(
    TMessage& msg,
    const char* const buf,
    std::size_t bufSize,
    comms::ErrorStatus expectedErrStatus)
{
    using InterfaceType = typename std::decay<decltype(comms::toMessage(msg))>::type;
    using ProtFrame = Frame<InterfaceType>;
    ProtFrame frame;
    static_cast<void>(frame);
    auto readIter = buf;
    auto es = frame.read(msg, readIter, bufSize);
    TS_ASSERT_EQUALS(es, expectedErrStatus);

    if (es == comms::ErrorStatus::Success) {
        auto diff = static_cast<std::size_t>(std::distance(buf, readIter));
        std::vector<char> outDataBuf(diff);
        if (outDataBuf.empty()) {
            outDataBuf.resize(1U); // Make sure the pointer to the first element is valid
        }
        auto writeIter = &outDataBuf[0];
        auto writeES = frame.write(msg, writeIter, diff);
        TS_ASSERT_EQUALS(writeES, comms::ErrorStatus::Success);
        TS_ASSERT(std::equal(buf, buf + diff, &outDataBuf[0]));
    }
}
