//
// Copyright 2019 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class CustomPostIdMsgSizeLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();

private:

    using BigEndianField = comms::Field<comms::option::BigEndian>;
    using BigEndianMsgId = 
        comms::field::EnumValue<
            BigEndianField,
            MessageType,
            comms::option::FixedLength<1>
        >;


    class SizeWithFlagsField : public
         comms::field::Bitfield<
            BigEndianField,
            std::tuple<
                comms::field::IntValue<BigEndianField, std::uint16_t, comms::option::FixedBitLength<12> >,
                comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >
            >        
        >
    {
        using Base = 
            comms::field::Bitfield<
                BigEndianField,
                std::tuple<
                    comms::field::IntValue<BigEndianField, std::uint16_t, comms::option::FixedBitLength<12> >,
                    comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >
                >        
            >;   
    public:
        COMMS_FIELD_MEMBERS_NAMES(size, flags);
    };

    using ExtraTransportFields =
        std::tuple<
            comms::field::IntValue<BigEndianField, std::uint8_t>
        >;

    using IfOptions = 
        std::tuple<
            comms::option::MsgIdType<MessageType>,
            comms::option::BigEndian,
            comms::option::IdInfoInterface,
            comms::option::ReadIterator<const char*>,
            comms::option::WriteIterator<char*>,
            comms::option::LengthInfoInterface,
            comms::option::ExtraTransportFields<ExtraTransportFields>
        >;

    struct Interface : public 
        comms::Message<IfOptions>
    {
        using Base = comms::Message<IfOptions>;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(flags);
    };

    using IfOptions2 = 
        std::tuple<
            comms::option::MsgIdType<MessageType>,
            comms::option::BigEndian,
            comms::option::IdInfoInterface,
            comms::option::ReadIterator<const char*>,
            comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
            comms::option::ExtraTransportFields<ExtraTransportFields>
        >;

    struct Interface2 : public 
        comms::Message<IfOptions2>
    {
        using Base = comms::Message<IfOptions2>;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(flags);
    };

    template <
          typename TNextLayer,
          typename... TOptions>
    class CustomPostIdMsgSizeLayer : public
        comms::frame::MsgSizeLayer<
            SizeWithFlagsField,
            TNextLayer,
            comms::option::ExtendingClass<CustomPostIdMsgSizeLayer<TNextLayer, TOptions...> >,
            TOptions...
        >
    {
        using Base = 
            comms::frame::MsgSizeLayer<
                SizeWithFlagsField,
                TNextLayer,
                comms::option::ExtendingClass<CustomPostIdMsgSizeLayer<TNextLayer, TOptions...> >,
                TOptions...
            >;

    public:

        using Field = typename Base::Field;

        static std::size_t getRemainingSizeFromField(const Field& field)
        {
            return static_cast<std::size_t>(field.field_size().value());
        }

        template <typename TMsg>
        static void beforeRead(const Field& field, TMsg* msg)
        {
            assert(msg != nullptr);
            msg->transportField_flags().value() = field.field_flags().value();
        }

        template <typename TMsg>
        static void prepareFieldForWrite(std::size_t size, const TMsg* msg, Field& field)
        {
            if (msg != nullptr) {
                field.field_flags().value() = msg->transportField_flags().value();
            }
            auto& sizeField = field.field_size();
            static_cast<void>(sizeField);
            using SizeFieldType = typename std::decay<decltype(sizeField)>::type;
            field.field_size().value() = static_cast<typename SizeFieldType::ValueType>(size);
        }
    };

    template <
          typename TNextLayer,
          typename... TOptions>
    class CustomPreIdMsgSizeLayer : public
        comms::frame::MsgSizeLayer<
            SizeWithFlagsField,
            TNextLayer,
            comms::option::ExtendingClass<CustomPreIdMsgSizeLayer<TNextLayer, TOptions...> >,
            TOptions...
        >
    {
        using Base = 
            comms::frame::MsgSizeLayer<
                SizeWithFlagsField,
                TNextLayer,
                comms::option::ExtendingClass<CustomPreIdMsgSizeLayer<TNextLayer, TOptions...> >,
                TOptions...
            >;

    public:

        using Field = typename Base::Field;

        static std::size_t getRemainingSizeFromField(const Field& field)
        {
            return static_cast<std::size_t>(field.field_size().value());
        }

        template <typename TMsg>
        void beforeRead(const Field& field, TMsg* msg)
        {
            static_cast<void>(msg);
            assert(msg == nullptr);
            Base::nextLayer().nextLayer().pseudoField().value() = field.field_flags().value();
        }

        template <typename TMsg>
        static void prepareFieldForWrite(std::size_t size, const TMsg* msg, Field& field)
        {
            if (msg != nullptr) {
                field.field_flags().value() = msg->transportField_flags().value();
            }
            auto& sizeField = field.field_size();
            static_cast<void>(sizeField);
            using SizeFieldType = typename std::decay<decltype(sizeField)>::type;
            field.field_size().value() = static_cast<typename SizeFieldType::ValueType>(size);
        }
    };

    template <typename TInterface>
    using AllMessages1 = 
        std::tuple<
            Message1<TInterface>,
            Message2<TInterface>,
            Message3<TInterface>
        >;

    template <typename TInterface = Interface>
    using Frame1 =
        comms::frame::MsgIdLayer<
            BigEndianMsgId,
            TInterface,
            AllMessages1<TInterface>,
            CustomPostIdMsgSizeLayer<
                comms::frame::MsgDataLayer<>
            >
        >;

    template <typename TInterface = Interface>
    using Frame2 =
        CustomPreIdMsgSizeLayer<
            comms::frame::MsgIdLayer<
                BigEndianMsgId,
                TInterface,
                AllMessages1<TInterface>,
                comms::frame::TransportValueLayer<
                    comms::field::IntValue<BigEndianField, std::uint8_t>,
                    0,
                    comms::frame::MsgDataLayer<>,
                    comms::option::PseudoValue
                >
            >
        >;
};

void CustomPostIdMsgSizeLayerTestSuite::test1()
{
    static const char Buf[] = {
        MessageType1, static_cast<char>(0xf0), 0x02, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using TestFrame = Frame1<>;
    TestFrame frame;
    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0xfU);

    using Msg1 = Message1<Interface>;
    auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
    TS_ASSERT(msg1 != nullptr);
    TS_ASSERT_EQUALS(msg1->field_value1().value(), 0x0102);
}

void CustomPostIdMsgSizeLayerTestSuite::test2()
{
    static const char Buf[] = {
        static_cast<char>(0xf0), 0x03, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using TestFrame = Frame2<>;
    TestFrame frame;
    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0xfU);

    using Msg1 = Message1<Interface>;
    auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
    TS_ASSERT(msg1 != nullptr);
    TS_ASSERT_EQUALS(msg1->field_value1().value(), 0x0102);
}

void CustomPostIdMsgSizeLayerTestSuite::test3()
{
    using Msg1 = Message1<Interface2>;
    Msg1 msg1;
    msg1.transportField_flags().value() = 0xfU;
    msg1.field_value1().value() = 0x0102;

    using TestFrame = Frame2<Interface2>;
    TestFrame frame;
    std::vector<char> outBuf;
    auto writeIter = std::back_inserter(outBuf);
    auto es = frame.write(static_cast<const Interface2&>(msg1), writeIter, outBuf.max_size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::UpdateRequired);
    auto updateIter = &outBuf[0];
    es = frame.update(msg1, updateIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    static const char Buf[] = {
        static_cast<char>(0xf0), 0x03, MessageType1, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    TS_ASSERT_EQUALS(BufSize, outBuf.size());
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), &Buf[0]));
}

void CustomPostIdMsgSizeLayerTestSuite::test4()
{
    static const char Buf[] = {
        static_cast<char>(0xf0), 0x03, MessageType1
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using TestFrame = Frame2<>;
    TestFrame frame;
    TestFrame::MsgPtr msg;
    std::size_t missingSize = 0U;
    auto readIter = &Buf[0];
    auto es = frame.read(msg, readIter, BufSize, comms::frame::missingSize(missingSize));
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::NotEnoughData);
    TS_ASSERT_EQUALS(missingSize, 2U);
}

void CustomPostIdMsgSizeLayerTestSuite::test5()
{
    using Msg1 = Message1<Interface2>;
    Msg1 msg1;
    msg1.transportField_flags().value() = 0xfU;
    msg1.field_value1().value() = 0x0102;

    using TestFrame = Frame1<Interface2>;
    TestFrame frame;
    std::vector<char> outBuf;
    auto writeIter = std::back_inserter(outBuf);
    auto es = frame.write(static_cast<const Interface2&>(msg1), writeIter, outBuf.max_size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::UpdateRequired);
    auto updateIter = &outBuf[0];
    es = frame.update(msg1, updateIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    // Repeate update with fields cached
    TestFrame::AllFields allFields;
    updateIter = &outBuf[0];
    es = frame.updateFieldsCached(allFields, msg1, updateIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    static const char Buf[] = {
        MessageType1, static_cast<char>(0xf0), 0x02, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;
    TS_ASSERT_EQUALS(BufSize, outBuf.size());
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), &Buf[0]));
}

