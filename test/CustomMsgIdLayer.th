//
// Copyright 2019 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class CustomMsgIdLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();

private:

    using BigEndianField = comms::Field<comms::option::BigEndian>;

    class IdWithFlagsField : public
         comms::field::Bitfield<
            BigEndianField,
            std::tuple<
                comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >,
                comms::field::EnumValue<BigEndianField, MessageType, comms::option::FixedBitLength<4> >
            >        
        >
    {
        using Base = 
            comms::field::Bitfield<
                BigEndianField,
                std::tuple<
                    comms::field::IntValue<BigEndianField, std::uint8_t, comms::option::FixedBitLength<4> >,
                    comms::field::EnumValue<BigEndianField, MessageType, comms::option::FixedBitLength<4> >
                >        
            >;   
    public:
        COMMS_FIELD_MEMBERS_NAMES(flags, id);
    };

    using ExtraTransportFields =
        std::tuple<
            comms::field::IntValue<BigEndianField, std::uint8_t>
        >;

    using IfOptions = 
        std::tuple<
            comms::option::MsgIdType<MessageType>,
            comms::option::BigEndian,
            comms::option::IdInfoInterface,
            comms::option::ReadIterator<const char*>,
            comms::option::WriteIterator<char*>,
            comms::option::LengthInfoInterface,
            comms::option::ExtraTransportFields<ExtraTransportFields>
        >;

    struct Interface : public 
        comms::Message<IfOptions>
    {
        using Base = comms::Message<IfOptions>;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(flags);
    };

    using BasicInterfaceOptions = 
        std::tuple<
            comms::option::MsgIdType<MessageType>,
            comms::option::BigEndian,
            comms::option::ExtraTransportFields<ExtraTransportFields>
        >;

    struct NonPolymorphicInterface : public 
        comms::Message<BasicInterfaceOptions>
    {
        using Base = comms::Message<BasicInterfaceOptions>;
    public:
        COMMS_MSG_TRANSPORT_FIELDS_NAMES(flags);

        static_assert(std::is_same<TransportField_flags, comms::field::IntValue<BigEndianField, std::uint8_t> >::value, "Invalid assumption");

        virtual ~NonPolymorphicInterface() = default;
    };


    template <
          typename TInterface,
          typename TAllMessages,
          typename TNextLayer,
          typename... TOptions>
    class CustomMsgIdLayer : public
        comms::frame::MsgIdLayer<
            IdWithFlagsField,
            TInterface,
            TAllMessages,
            TNextLayer,
            comms::option::ExtendingClass<CustomMsgIdLayer<TInterface, TAllMessages, TNextLayer, TOptions...> >,
            TOptions...
        >
    {
        using Base = 
            comms::frame::MsgIdLayer<
                IdWithFlagsField,
                TInterface,
                TAllMessages,
                TNextLayer,
                comms::option::ExtendingClass<CustomMsgIdLayer<TInterface, TAllMessages, TNextLayer, TOptions...> >,
                TOptions...
            >;        
    public:
        using Field = typename Base::Field;
        using MsgIdType = typename Base::MsgIdType;
        using MsgIdParamType = typename Base::MsgIdParamType;

        static MsgIdType getMsgIdFromField(const Field& field)
        {
            return field.field_id().value();
        }

        template <typename TMsg>
        static void beforeRead(const Field& field, TMsg& msg)
        {
            msg.transportField_flags().value() = field.field_flags().value();
        }

        template <typename TMsg>
        static void prepareFieldForWrite(MsgIdParamType id, const TMsg& msg, Field& field)
        {
            field.field_flags().value() = msg.transportField_flags().value();
            field.field_id().value() = id;
        }
    };

    template <typename TInterface>
    using AllMessages1 = 
        std::tuple<
            Message1<TInterface>,
            Message2<TInterface>,
            Message3<TInterface>
        >;

    template <typename TInterface = Interface>
    class SimpleFrame : public
        CustomMsgIdLayer<
            TInterface, 
            AllMessages1<TInterface>,
            comms::frame::MsgDataLayer<>
        >
    {
        using Base =
            CustomMsgIdLayer<
                TInterface,
                AllMessages1<TInterface>,
                comms::frame::MsgDataLayer<>
            >;
    public:
        COMMS_PROTOCOL_LAYERS_NAMES_OUTER(id, payload);
    };

    template <typename TInterface = Interface>
    class FrameWithGenericMsg : public
        CustomMsgIdLayer<
            TInterface,
            AllMessages1<TInterface>,
            comms::frame::MsgDataLayer<>,
            comms::option::SupportGenericMessage<comms::GenericMessage<TInterface> >
        >
    {
        using Base =
            CustomMsgIdLayer<
                TInterface,
                AllMessages1<TInterface>,
                comms::frame::MsgDataLayer<>,
                comms::option::SupportGenericMessage<comms::GenericMessage<TInterface> >
            >;
    public:
        COMMS_PROTOCOL_LAYERS_NAMES_OUTER(id, payload);
    };    

    template <typename TInterface = Interface>
    class InPlaceFrameWithGenericMsg : public
        CustomMsgIdLayer<
            TInterface,
            AllMessages1<TInterface>,
            comms::frame::MsgDataLayer<>,
            comms::option::SupportGenericMessage<comms::GenericMessage<TInterface> >,
            comms::option::InPlaceAllocation
        >
    {
        using Base =
            CustomMsgIdLayer<
                TInterface,
                AllMessages1<TInterface>,
                comms::frame::MsgDataLayer<>,
                comms::option::SupportGenericMessage<comms::GenericMessage<TInterface> >,
                comms::option::InPlaceAllocation
            >;
    public:
        COMMS_PROTOCOL_LAYERS_NAMES_OUTER(id, payload);
    };    
};

void CustomMsgIdLayerTestSuite::test1()
{
    static const char Buf[] = {
        0x02, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = SimpleFrame<>;
    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0x2U);

    using Msg1 = Message1<Interface>;
    auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
    TS_ASSERT(msg1 != nullptr);
    TS_ASSERT_EQUALS(msg1->field_value1().value(), 0x0102);
}

void CustomMsgIdLayerTestSuite::test2()
{
    static const char Buf[] = {
        0x7f, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = FrameWithGenericMsg<>;
    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType5);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0xfU);
}

void CustomMsgIdLayerTestSuite::test3()
{
    static const char Buf[] = {
        0x02, 0x01, 0x02
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = InPlaceFrameWithGenericMsg<>;
    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0x2U);

    using Msg1 = Message1<Interface>;
    auto* msg1 = dynamic_cast<Msg1*>(msgPtr.get());
    TS_ASSERT(msg1 != nullptr);
    TS_ASSERT_EQUALS(msg1->field_value1().value(), 0x0102);
}

void CustomMsgIdLayerTestSuite::test4()
{
    static const char Buf[] = {
        0x7f, 0x01, 0x02, 0x03, 0x04, 0x05
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = InPlaceFrameWithGenericMsg<>;
    Stack stack;
    auto msgPtr = commonReadWriteMsgTest(stack, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType5);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0xfU);
}

void CustomMsgIdLayerTestSuite::test5()
{
    static const char Buf[] = {
        0x7f, 0x01, 0x02, 0x03, 0x04, 0x05
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = InPlaceFrameWithGenericMsg<NonPolymorphicInterface>;
    Stack stack;
    Stack::MsgPtr msgPtr;
    auto readIter = &Buf[0];
    auto es = stack.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->transportField_flags().value(), 0xfU);

    auto* msg = dynamic_cast<comms::GenericMessage<NonPolymorphicInterface>*>(msgPtr.get());
    TS_ASSERT(msg != nullptr);
    TS_ASSERT_EQUALS(msg->doGetId(), MessageType5);
}

void CustomMsgIdLayerTestSuite::test6()
{
    static const char Buf[] = {
        0x3, 0x01,
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    using Stack = SimpleFrame<NonPolymorphicInterface>;
    Stack stack;
    Stack::MsgPtr msgPtr;
    auto readIter = &Buf[0];
    std::size_t missingSize = 0U;
    auto es = stack.read(msgPtr, readIter, BufSize, comms::frame::missingSize(missingSize));
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::NotEnoughData);
    TS_ASSERT_EQUALS(missingSize, 1U);
}
