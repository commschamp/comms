//
// Copyright 2025 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "CommsTestCommon.h"

#include "comms/CompileControl.h"
#include "comms/GenericMessage.h"
#include "comms/frame/MsgIdLayer.h"
#include "comms/frame/MsgDataLayer.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class GenericMessageTestSuite : public CxxTest::TestSuite
{
public:
    void test1();

private:
    using BeFieldBase = comms::Field<comms::option::BigEndian>;
    using BeIdField1 = comms::field::EnumValue<BeFieldBase, MessageType, comms::option::def::FixedLength<1U>>;

    template <typename... TOpts>
    using BeMsgBase = 
        comms::Message<
            comms::option::BigEndian,
            TOpts...
        >;

    using BePolymorphicMsgBase = 
        BeMsgBase<
            comms::option::MsgIdType<MessageType>,
            comms::option::IdInfoInterface,
            comms::option::ReadIterator<const char*>,
            comms::option::WriteIterator<char*>,
            comms::option::ValidCheckInterface,
            comms::option::LengthInfoInterface        
        >;


    template <typename TIdField, typename TMessage, template<class> class TAllMessages = AllTestMessages>
    class SimpleFrame : public
        comms::frame::MsgIdLayer<
            TIdField,
            TMessage,
            TAllMessages<TMessage>,
            comms::frame::MsgDataLayer<>,
            comms::option::SupportGenericMessage<comms::GenericMessage<TMessage> >
        >
    {
        using Base =
            comms::frame::MsgIdLayer<
                TIdField,
                TMessage,
                TAllMessages<TMessage>,
                comms::frame::MsgDataLayer<>,
                comms::option::SupportGenericMessage<comms::GenericMessage<TMessage> >
            >;
    public:
        COMMS_FRAME_LAYERS_NAMES_OUTER(id, payload);
    };    
};

void GenericMessageTestSuite::test1()
{
    using Msg = comms::GenericMessage<BePolymorphicMsgBase>;
    using TestFrame = SimpleFrame<BeIdField1, BePolymorphicMsgBase>;

    TestFrame frame;
    Msg msg(MessageType5);

    static const char Buf[] = {
        MessageType5, 0x01, 0x02, 0x03,
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;    

    auto iter = comms::readIteratorFor(msg, Buf);
    auto es = frame.read(msg, iter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    std::vector<char> outBuf;
    outBuf.reserve(BufSize);
    auto outIter = std::back_inserter(outBuf);
    es = frame.write(msg, outIter, outBuf.max_size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);   
    TS_ASSERT_EQUALS(outBuf.size(), BufSize);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
}