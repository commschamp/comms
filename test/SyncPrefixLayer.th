//
// Copyright 2014 - 2025 (C). Alex Robenko. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include <cstdint>
#include <cstddef>
#include <algorithm>
#include <iterator>

#include "comms/comms.h"
#include "CommsTestCommon.h"

CC_DISABLE_WARNINGS()
#include "cxxtest/TestSuite.h"
CC_ENABLE_WARNINGS()

class SyncPrefixLayerTestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();
    void test5();
    void test6();
    void test7();
    void test8();

private:

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > BeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::BigEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<std::back_insert_iterator<std::vector<char> > >,
        comms::option::LengthInfoInterface
    > BeBackInsertTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::IdInfoInterface,
        comms::option::LittleEndian,
        comms::option::ReadIterator<const char*>,
        comms::option::WriteIterator<char*>,
        comms::option::LengthInfoInterface
    > LeTraits;

    typedef std::tuple<
        comms::option::MsgIdType<MessageType>,
        comms::option::BigEndian
    > NonPolymorphicBigEndianTraits;

    typedef TestMessageBase<BeTraits> BeMsgBase;
    typedef TestMessageBase<LeTraits> LeMsgBase;
    typedef TestMessageBase<BeBackInsertTraits> BeBackInsertMsgBase;
    typedef comms::Message<NonPolymorphicBigEndianTraits> BeNonPolymorphicMessageBase;

    typedef BeMsgBase::Field BeField;
    typedef LeMsgBase::Field LeField;
    typedef BeBackInsertMsgBase::Field BeBackInsertField;

    typedef Message1<BeMsgBase> BeMsg1;
    typedef Message1<LeMsgBase> LeMsg1;
    typedef Message1<BeBackInsertMsgBase> BeBackInsertMsg1;
    typedef Message2<BeMsgBase> BeMsg2;
    typedef Message2<LeMsgBase> LeMsg2;
    typedef Message3<BeMsgBase> BeMsg3;
    typedef Message3<LeMsgBase> LeMsg3;
    typedef Message3<BeBackInsertMsgBase> BeBackInsertMsg3;

    typedef Message1<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg1;
    typedef Message2<BeNonPolymorphicMessageBase> NonPolymorphicBeMsg2;

    template <typename TField, std::size_t TSize>
    using SyncField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::DefaultNumValue<0xabcd>
        >;

    template <typename TField>
    using SyncField2 = SyncField<TField, 2>;
    using BeSyncField2 = SyncField2<BeField>;
    using LeSyncField2 = SyncField2<LeField>;
    using BeBackInsertSyncField2 = SyncField2<BeBackInsertField>;

    template <typename TField, std::size_t TSize, std::size_t TOffset = 0>
    using SizeField =
        comms::field::IntValue<
            TField,
            unsigned,
            comms::option::FixedLength<TSize>,
            comms::option::NumValueSerOffset<static_cast<std::intmax_t>(TOffset)>
        >;

    template <typename TField>
    using SizeField20 = SizeField<TField, 2, 0>;
    using BeSizeField20 = SizeField20<BeField>;
    using LeSizeField20 = SizeField20<LeField>;
    using BeBackInsertSizeField20 = SizeField20<BeBackInsertField>;

    template <typename TField>
    using SizeField30 = SizeField<TField, 3, 0>;
    using BeSizeField30 = SizeField30<BeField>;
    using LeSizeField30 = SizeField30<LeField>;

    template <typename TField>
    using SizeField22 = SizeField<TField, 2, 2>;
    using BeSizeField22 = SizeField22<BeField>;
    using LeSizeField22 = SizeField22<LeField>;

    template <typename TField, std::size_t TLen>
    using IdField =
        comms::field::EnumValue<
            TField,
            MessageType,
            comms::option::FixedLength<TLen>
        >;

    template <typename TField>
    using IdField1 = IdField<TField, 1>;
    using BeIdField1 = IdField1<BeField>;
    using LeIdField1 = IdField1<LeField>;
    using BeBackInsertIdField1 = IdField1<BeBackInsertField>;

    template <typename TField>
    using IdField2 = IdField<TField, 2>;
    using BeIdField2 = IdField2<BeField>;
    using LeIdField2 = IdField2<LeField>;

    template <typename TSyncField, typename TSizeField, typename TIdField, typename TMessage>
    using Frame =
        comms::frame::SyncPrefixLayer<
            TSyncField,
            comms::frame::MsgSizeLayer<
                TSizeField,
                comms::frame::MsgIdLayer<
                    TIdField,
                    TMessage,
                    AllTestMessages<TMessage>,
                    comms::frame::MsgDataLayer<>
                >
            >
        >;
};

void SyncPrefixLayerTestSuite::test1()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > TestFrame;

    TestFrame frame;

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void SyncPrefixLayerTestSuite::test2()
{
    LeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0304;

    static const char ExpectedBuf[] = {
        static_cast<char>(0xcd), static_cast<char>(0xab), 0x4, 0x0, 0x0, MessageType1, 0x0, 0x04, 0x03
    };

    static const std::size_t BufSize = std::extent<decltype(ExpectedBuf)>::value;
    char buf[BufSize] = {0};

    typedef
        Frame<
            LeSyncField2,
            LeSizeField30,
            LeIdField2,
            LeMsgBase
        > TestFrame;

    TestFrame frame;
    commonWriteReadMsgTest(frame, msg, buf, BufSize, &ExpectedBuf[0]);
}

void SyncPrefixLayerTestSuite::test3()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xce), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > TestFrame;

    TestFrame frame;

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize, comms::ErrorStatus::ProtocolError);
    TS_ASSERT(!msgPtr);
}

void SyncPrefixLayerTestSuite::test4()
{
    static const char Buf[] = {
        static_cast<char>(0xab)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeMsgBase
        > TestFrame;

    TestFrame frame;

    auto msgPtr = commonReadWriteMsgTest(frame, &Buf[0], BufSize, comms::ErrorStatus::NotEnoughData);
    TS_ASSERT(!msgPtr);
}

void SyncPrefixLayerTestSuite::test5()
{
    LeMsg1 msg;
    std::get<0>(msg.fields()).value() = 0x0203;

    char buf[1] = {0};
    static const std::size_t BufSize = std::extent<decltype(buf)>::value;

    typedef
        Frame<
            LeSyncField2,
            LeSizeField30,
            LeIdField2,
            LeMsgBase
        > TestFrame;

    TestFrame frame;
    commonWriteReadMsgTest(frame, msg, buf, BufSize, nullptr, comms::ErrorStatus::BufferOverflow);
}

void SyncPrefixLayerTestSuite::test6()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeBackInsertSyncField2,
            BeBackInsertSizeField20,
            BeBackInsertIdField1,
            BeBackInsertMsgBase
        > TestFrame;

    TestFrame frame;

    auto msgPtr = vectorBackInsertReadWriteMsgTest(frame, &Buf[0], BufSize);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), MessageType1);
    auto& msg1 = dynamic_cast<BeBackInsertMsg1&>(*msgPtr);
    TS_ASSERT_EQUALS(std::get<0>(msg1.fields()).value(), 0x0102);
}

void SyncPrefixLayerTestSuite::test7()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x3, MessageType1, 0x01, 0x02, static_cast<char>(0x3f)
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeNonPolymorphicMessageBase
        > TestFrame;

    TestFrame frame;
    NonPolymorphicBeMsg1 msg;
    commonReadWriteMsgDirectTest(frame, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(msg.fields()).value(), 0x0102);

    TestFrame::AllFields fields;
    commonReadWriteMsgDirectTest(frame, fields, msg, &Buf[0], BufSize);
    TS_ASSERT_EQUALS(std::get<0>(fields).value(), 0xabcd);
    TS_ASSERT_EQUALS(std::get<1>(fields).value(), 3U);
    TS_ASSERT_EQUALS(std::get<2>(fields).value(), MessageType1);
    TS_ASSERT_EQUALS(std::get<3>(fields).value(), std::vector<std::uint8_t>(Buf + 5, Buf + 7));

    NonPolymorphicBeMsg2 msg2;
    commonReadWriteMsgDirectTest(frame, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);

    TestFrame::AllFields fields2;
    commonReadWriteMsgDirectTest(frame, fields2, msg2, &Buf[0], BufSize, comms::ErrorStatus::InvalidMsgId);
    TS_ASSERT_EQUALS(std::get<0>(fields2).value(), 0xabcd);
    TS_ASSERT_EQUALS(std::get<1>(fields2).value(), 3U);
    TS_ASSERT_EQUALS(std::get<2>(fields2).value(), MessageType1);
}

void SyncPrefixLayerTestSuite::test8()
{
    static const char Buf[] = {
        static_cast<char>(0xab), static_cast<char>(0xcd), 0x0, 0x3, MessageType90, 0x01, 0x01
    };

    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    typedef
        Frame<
            BeSyncField2,
            BeSizeField20,
            BeIdField1,
            BeNonPolymorphicMessageBase
        > TestFrame;

    TestFrame frame;
    TestFrame::MsgPtr msg;
    MessageType msgId = MessageType();
    std::size_t msgIndex = 0U;
    auto readIter = &Buf[0];
    decltype(readIter) payloadIter = nullptr;
    std::size_t payloadSize = 0U;
    auto es =
        frame.read(
            msg, readIter, BufSize,
            comms::frame::msgId(msgId),
            comms::frame::msgIndex(msgIndex),
            comms::frame::msgPayload(payloadIter, payloadSize));

    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT_EQUALS(msgId, MessageType90);
    TS_ASSERT_EQUALS(msgIndex, 1U);
    TS_ASSERT_EQUALS(static_cast<const void*>(payloadIter), static_cast<const void*>(&Buf[5]));
    TS_ASSERT_EQUALS(payloadSize, 2U);
}
